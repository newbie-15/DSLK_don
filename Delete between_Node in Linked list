Method 1:
Code:
#include <stdio.h>
#include <stdlib.h>
struct node {
	int data;
	struct node *next;
};
typedef struct node node;
int len(node **head){
	int cnt = 0;
	node *tmp = *head;
	while(tmp != NULL){
		++cnt;
		tmp = tmp->next;
	}
	return cnt;
}
node *makeNode(int x){
	node *newNode = (node*)malloc(sizeof(node));
	newNode->data = x;
	newNode->next = NULL;
	return newNode;
}
void themdau(node **head, int x){
	node *newNode = makeNode(x);
	if(*head == NULL){
		*head = newNode;
		return;
	}
	else{
		newNode->next = *head;
		*head = newNode;
	}
}
void themcuoi(node **head, int x){
	node *newNode = makeNode(x);
	if(*head == NULL){
		themdau(head, x);
		return;
	}
	else{
		node *tmp = *head;
		while(tmp->next != NULL){
			tmp = tmp->next;
		}
		tmp->next = newNode;
		tmp = newNode;
	}
}
void xoadau(node **head){
	node *delNode = *head;
	(*head) = (*head)->next;
	free(delNode);
}
void xoagiua(node **head, int k){
	if(*head == NULL){
		return; //DSLK rong
	}
	else{
		if(k == 1){
			xoadau(head);
			return;
		}
		else if(k < 1 || k > len(head)){
			printf("Vi tri k can xoa khong hop le!\n");
			return;
		}
		else{
			node *tmp = *head;
			for(int i = 1; i < k-1; i++){
				tmp = tmp->next;
			}
			node *delNode = tmp->next;
			tmp->next = delNode->next;
			free(delNode);
		}
	}
}
void duyet(node *head){
	while(head != NULL){
		printf("%d ", head->data);
		head = head->next;
	}
}
int main(){
	node *head = NULL;
	for(int i = 1; i <= 10; i++){
		themcuoi(&head, i);
	}
	duyet(head);
	printf("\n");
	xoagiua(&head, 1);
	duyet(head);
	return 0;
}

Method 2:
Code:
#include <stdio.h>
#include <stdlib.h>
struct node {
	int data;
	struct node *next;
};
typedef struct node node;
struct LIST{
	node *head;
	node *tail;
};
typedef struct LIST LIST;
node *makeNode(int x){
	node *newNode = (node*)malloc(sizeof(node));
	newNode->data = x;
	newNode->next = NULL;
	return newNode;
}
int len(LIST *l){
	int cnt = 0;
	node *tmp = l->head;
	while(tmp != NULL){
		++cnt;
		tmp = tmp->next;
	}
	return cnt;
}
void themdau(LIST *l, int x){
	node *newNode = makeNode(x);
	if(l->head == NULL){
		l->head = newNode;
		l->tail = newNode;
		return;
	}
	else{
		newNode->next = l->head;
		l->head = newNode;
	}
}
void themcuoi(LIST *l, int x){
	if(l->head == NULL){
		themdau(l, x);
		return;
	}
	else{
		node *newNode = makeNode(x);
		node *tmp = l->head;
		while(tmp->next != NULL){
			tmp = tmp->next;	
		}
		tmp->next = newNode;
		l->tail = newNode;
	}
}
void xoadau(LIST *l){
	node *delNode = l->head;
	l->head = l->head->next;
	free(delNode);
}
void xoagiua(LIST *l, int k){
	if(l->head == NULL){
		return;//Linked list empty
	}
	else{
		if(k == 1){
			xoadau(l);
			return;
		}
		else{
			if(k < 1 || k > len(l)){
				printf("Vi tri xoa k khong hop le!\n");
				return;
			}
			else{
				node *tmp = l->head;
				for(int i = 1; i < k-1; i++){
					tmp = tmp->next;
				}
				node *delNode = tmp->next;
				tmp->next = delNode->next;
				free(delNode);
			}
		}
	}
}
void duyet(LIST l){
	node *tmp = l.head;
	while(tmp != NULL){
		printf("%d ", tmp->data);
		tmp = tmp->next;
	}
}
int main(){
	LIST l;
	l.head = NULL, l.tail = NULL;
	for(int i = 1; i <= 10; i++){
		themcuoi(&l, i);
	}
	duyet(l);
	printf("\n");
	xoagiua(&l, 5);
	duyet(l);
	return 0;
}
